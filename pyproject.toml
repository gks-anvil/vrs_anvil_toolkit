[project]
name = "vrs_anvil_toolkit"
authors = [
    {name = "Ellrott lab"},
]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = ["anvil", "terra", "bioinformatics"]
requires-python = ">=3.10"
description = "Process VCFs and perform lookup operations on GA4GH VRS identifiers."
license = {file = "LICENSE"}
dependencies = [
    "ga4gh.vrs[extras]==2.0.0a13",
    "diskcache",
    "biocommons.seqrepo",
    "glom",
    "click",
    "pyyaml",
    "google",
    "requests",
    "boto3",
    "tqdm",
    "google-cloud-storage",
    "psutil",
    "firecloud",
    "pandas",
    "vrsix==0.1.1",
    "ga4gh.va_spec @ git+https://github.com/ga4gh/va-spec-python.git@2ea827ee9179262094e9f4cdba0876a6a389a54c#egg=ga4gh.va_spec",
]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
    "pytest",
]
dev = [
    "ruff~=0.8.6",
    "twine",
    "wheel",
    "setuptools",
]

[project.urls]
Homepage = "https://github.com/gks-anvil/vrs_anvil_toolkit"
Documentation = "https://github.com/gks-anvil/vrs_anvil_toolkit"
Source = "https://github.com/gks-anvil/vrs_anvil_toolkit"
"Bug Tracker" = "https://github.com/gks-anvil/vrs_anvil_toolkit/issues"

[project.scripts]
vrs_bulk = "vrs_anvil.cli:cli"

[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"" = ["*.yaml"]  # TODO figure this out

[tool.setuptools_scm]

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
select = [
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLOT",  # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PLC",  # https://docs.astral.sh/ruff/rules/#convention-c
    "PLE",  # https://docs.astral.sh/ruff/rules/#error-e_1
    "TRY",  # https://docs.astral.sh/ruff/rules/#tryceratops-try
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
fixable = [
    "F401",
    "I",
    "UP",
    "B",
    "C4",
    "LOG",
    "G",
    "PIE",
    "PT",
    "RSE",
    "SIM",
    "PLC",
    "PLE",
    "TRY",
    "PERF",
    "FURB",
    "RUF"
]
ignore = [
    # ignored for compatibility with formatter:
    "D300", "E111", "E114", "E117", "E501", "W191",
    # else:
    "PLC0206",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "B011",
    "INP001"
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.format]
docstring-code-format = true
